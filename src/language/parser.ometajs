// # module: mermaid.parser
//
// Parser for the Mermaid language.

// -- Dependencies -----------------------------------------------------
var ast = require('./ast');
var extend = require('xtend');
var Expr = ast.Expr;
var Do = ast.DoClause;

var reserved = [
  'extend', 'let', 'this', 'do', 'module', 'exposing', 'def',
  '|', '<-', '=', '>>', 'with', 'where', 'use', 'in', 'using', 'return',
]

function isValid(a) {
  return reserved.indexOf(a) === -1
}

function get(k){ return function(o){
  return o[k]
}}

function keywordApply(meta, target, args) {
  var id = Expr.Id(meta, args.map(get(0)).map(get('name')).join(''));
  return Expr.Apply(meta, id, target, args.map(get(1)))
}

function keywordLambda(meta, args, body, docs) {
  var id = Expr.Id(meta, args.map(get(0)).map(get('name')).join(''));
  return [id, Expr.Lambda(extend(meta, { docs: docs }), args.map(get(1)), body)]
}

function decorateLet(letNode, expr) {
  return Expr.Let(expr.meta,
                  letNode.name,
                  Expr.Apply(letNode.meta, Expr.Id({}, 'call:'), expr, [letNode.value]))
}

// ## object: MermaidParser
ometa MermaidParser {
  space   = /\s/,
  ignored = space | comment,
  comment = fromTo('(*', '*)'):a -> a.slice(2, -2).trim(),
  ws      = ignored*,
  sep     = ',' | '.',
  symbol  = ~( letter | digit | space | '#'
             | '_' | '$' | '^' | '@' | ';' | ':' | '{' | '}' | '(' | ')' | '[' | ']'
             ) char,
  eof     = ~char,
  kw :xs  = seq(xs) ~(letter | digit | symbol | sep | ':'),


  // Identifiers
  idStart    = letter | '#',
  idRest     = ~sep (letter | digit | symbol),
  identifier = <idStart idRest*>:a     ?(isValid(a)) -> Expr.Id({}, a),
  keyword    = <idStart idRest*>:a ':'               -> Expr.Id({}, a + ':'),
  symbols    = <symbol+>:a             ?(isValid(a)) -> Expr.Id({}, a),

  selector   = identifier
             | symbols
             | keyword+:xs -> Expr.Id(xs[0].meta, xs.map(get('name')).join('')),

  // Patterns
  pattern = decoratedPattern
          | kw('def') ws (keywordPattern | binaryPattern | unaryPattern),

  decoratedPattern = '@' expr:a ws ';' ws pattern:p
                  -> [p[0], Expr.Apply({}, Expr.Id({}, 'call:'), a, [p[1]])],

  docComment  = space* comment:a ws -> a,
  patternBody = docComment?:a ws ('=' ws)? stmtList:as -> [as, a || ''],

  keywordArgs = (ws keyword:k ws identifier:n -> [k, n])+,

  keywordPattern = keywordArgs:as space* patternBody:v
                -> keywordLambda({}, as, v[0], v[1]),
  unaryPattern   = identifier:a ~':' space* patternBody:v
                -> [a, Expr.Lambda({ docs: v[1] }, [], v[0])],
  binaryPattern  = symbols:a ws identifier:b space* patternBody:v
                -> [a, Expr.Lambda({ docs: v[1] }, [b], v[0])],



  // Statements
  letStmt = '@' expr:a ws ';' ws letStmt:b             -> decorateLet(b, a)
          | kw('let') ws identifier:a ws '=' ws expr:b -> Expr.Let({}, a, b),

  module     = kw('module') ws moduleArgs?:a ws exportStmt?:b ws kw('where') ws stmtList:cs
             -> Expr.Module({}, a || [], b, cs),
  moduleArgs = '|' ws identifier:a (ws identifier)*:as ws '|' -> [a].concat(as),
  exportStmt = kw('exposing') ws expr:a -> a,

  useExpr = kw('use') ws listOf(#expr, ';'):xs ws kw('in') ws '{' ws stmtList:ys ws '}'
          -> Expr.Use({}, xs, ys),

  usingStmt = kw('using') ws listOf(#expr, ';'):xs -> Expr.Using({}, xs),

  // Expressions
  stmt = letStmt
       | usingStmt
       | identifier:a ~':' ws '=' ws expr:b -> Expr.Assign({}, Expr.Free({}, a), b)
       | ';'        -> Expr.Empty
       | expr,

  expr = useExpr
       | pipeExpr,

  pipeExpr = pipeExpr:a ws ">>" ws identifier:i ~':'        -> Expr.Apply({}, i, a, [])
           | pipeExpr:a ws ">>" ws symbols:s ws unaryExpr:b -> Expr.Apply({}, s, a, [b])
           | pipeExpr:a ws ">>" (ws keywordApp)+:as         -> keywordApply({}, a, as)
           | appExpr,

  appExpr = keywordExpr
          | binaryExpr,

  keywordApp  = keyword:k ws binaryExpr:v -> [k, v],

  keywordExpr = binaryExpr:a (ws keywordApp)+:as          -> keywordApply({}, a, as),
  binaryExpr  = binaryExpr:a ws symbols:s ws unaryExpr:b  -> Expr.Apply({}, s, a, [b])
              | unaryExpr,
  unaryExpr   = unaryExpr:a ws identifier:i ~':'      -> Expr.Apply({}, i, a, [])
              | unaryExpr:a ws record:v               -> Expr.Clone({}, a, v)
              | unaryExpr:a ':' ':' identifier:i ~':' -> Expr.Bind({}, a, i)
              | primaryExpr,
  primaryExpr = '_'                  -> Expr.Hole({})
              | doExpr
              | value
              | identifier:a ~':'    -> Expr.Free({}, a)
              | kw('this')           -> Expr.Self({})
              | extendExpr:a         -> a
              | '(' ws expr:a ws ')' -> a,

  extendExpr = kw('extend') ws expr:a ws kw('with') ws record:v -> Expr.Extend({}, a, v),

  stmtList = stmt:a (ws ';' ws stmt)*:as -> [a].concat(as),

  blockStmt = stmt
            | '^' ws expr:a -> Expr.Return({}, a),
  blockStmtList = blockStmt:a (ws ';' ws blockStmt)*:as -> [a].concat(as),

  doExpr = kw('do') ws '{' ws (doCase:c ws ';' ws -> c)*:xs ws doTailCase:x ws '}'
         -> Expr.Do({}, xs.concat([x])),
  doAction     = identifier:i ws "<-" ws expr:e -> Do.Action({}, i, e)
               | doTailAction,
  doTailAction = expr:e                         -> Do.Action({}, Expr.Id({}, '_'), e),
  doPure       = identifier:i ws "<-" ws kw('return') ws expr:e -> Do.Return({}, i, e)
               | doTailPure,
  doTailPure   = kw('return') ws expr:e                         -> Do.Return({},
                                                                             Expr.Id({}, '_'),
                                                                             e),
  doCase       = doPure | doAction,
  doTailCase   = doTailPure | doTailAction,

  // Values
  value = number | string | vector | lambda | record,

  octDigit = /[0-7_]/,
  hexDigit = /[0-9a-fA-F_]/,
  binDigit = '0' | '1' | '_',
  digits = (digit | '_')+:as -> Number(as.join('').replace(/_/g, '')),
  number = '-'?:s ( '0' 'b' <binDigit+>:n
                    -> Expr.Num({}, +((s || '+') + parseInt(n.replace(/_/g, ''), 2)))
                  | '0' 'o' <octDigit+>:n
                    -> Expr.Num({}, +((s || '+') + parseInt(n.replace(/_/g, ''), 8)))
                  | '0' 'x' <hexDigit+>:n
                    -> Expr.Num({}, +((s || '+') + parseInt(n.replace(/_/g, ''), 16)))
                  | digits:a ('.' digits:b exponent:c)?
                    -> Expr.Num({}, +((s || '+') + a + '.' + (b || 0) + (c || 0)))
                  ),
  sign = '+' | '-',
  exponent = ('e' | 'E') sign?:s digits:d -> s + d,

  stringEscape     = '\\' ( 'b' -> '\b'
                          | 'f' -> '\f'
                          | 'n' -> '\n'
                          | 'r' -> '\r'
                          | 't' -> '\t'
                          | char),
  stringChar       = (stringEscape | (~seq('"') char)):a -> a,
  unescapableChars = ~seq('"""') char,
  string           = seq('"""') <unescapableChars*>:as seq('"""') -> Expr.Str({}, as)
                   | '"' (stringChar)*:as '"'                     -> Expr.Str({}, as.join('')),

  vector = '[' ws expr:hd (ws ';' ws expr)*:tl ws ']' -> Expr.Vector({}, [hd].concat(tl))
         | '[' ws ']'                                 -> Expr.Vector({}, []),

  record = '{' ws pattern:hd (ws pattern)*:tl ws '}' -> Expr.Record({}, [hd].concat(tl))
         | '{' ws '}'                                -> Expr.Record({}, []),

  lambda  = '{' ws arglist:as ws '|' ws blockStmtList:a ws '}' -> Expr.Block({}, as, a)
          | '{' ws blockStmtList:a ws '}'                      -> Expr.Block({}, [], a),

  arglist = identifier:a (ws identifier)*:as              -> [a].concat(as),

  program = ws module:m ws eof    -> m
          | ws stmtList:xs ws eof -> Expr.Program(xs)
}
