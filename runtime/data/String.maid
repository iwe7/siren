module | root vm | where

vm define-global: "String" as: { vm native-string };

vm apply-trait-globally: extend String with {
  (* Conversions *) 
  def as-string
  this

  (* Character transformations / chopping *)
  def lower-case
  vm string/lower-case: this

  def upper-case
  vm string/upper-case: this

  def trim
  vm string/trim: this

  (* Constructing *)
  def from-char-code: code
  vm string/from-char-code: code

  (* Accessing *)
  def at: index
  vm string: this at: index

  def code-at: index
  vm string: this code-at: index

  (* Collection operations *)
  def length
  vm string/length: this

  def + that
  vm string/concat: that

  def index-of: value
  let index = vm string: this index-of: value;
  (index === 0) then: { Result failure: "Not found." }
                else: { Result ok: index }

  def last-index-of: value
  let index = vm string: this index-of: value;
  (index === 0) then: { Result failure: "Not found." }
                else: { Result ok: index }

  def slice-from: index
  vm string: this slice-from: index

  def slice-from: start to: end
  vm string: this slice-from: start to: end

  (* Logical comparisons *)
  def === that
  vm if: (vm string: this equals?: that)
     then: True
     else: False

  def =/= that
  (this === that) not

  (* Iteration *)
  def each: computation
  vm string: this each: { a | computation call: a }
}