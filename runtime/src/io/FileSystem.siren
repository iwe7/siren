module | vm | where

vm define-global: "FileSystem" as: { FileSystem };

let FileSystem = {
  def Path
    Path
};

(* TODO: better handling of Node's errors *)
(* TODO: figure out how to switch between directory/file nodes
   This is complicated because Node's stat routines are async =/
   OTOH, stating at every path change is gonna hurt so... *)
let INode = {
  def exists?
    let path = this path-string;
    Task { def fork: resolver
             vm fs/exists?: path notify: { a | resolver success: (FFI import: a) } }

  def rename: new-path
    let current = this path-string;
    let new = new-path path-string;
    Task {
      def fork: resolver
        vm fs/rename: current to: new
           on-success: { a | resolver success: Unit }
           on-failure: { a | resolver failure: (FFI import: a) }
    }

  def change-owner: new-owner group: new-group
    let current = this path-string;
    Task {
      def fork: resolver
        vm fs/change: current owner: new-owner group: new-group
           on-success: { a | resolver success: Unit }
           on-failure: { a | resolver failure: (FFI import: a) }
    }

  def change-mode: new-mode
    let current = this path-string;
    Task {
      def fork: resolver
        vm fs/change: current mode: new-mode
           on-success: { a | resolver success: Unit }
           on-failure: { a | resolver failure: (FFI import: a) }
    }
};

let Path = {
  def as-string
    "<Path " + this path-string + ">"

  def path-string
    unimplemented

  def parse: string
    let initial = vm if: (vm path/absolute?: string)
                     then: this root
                     else: this relative;
    vm path/normalise: string >> split: "/"
                              >> fold: _ / _ from: initial
    
  def root
    Root-Path

  def relative
    Relative-Path

  def from: parent to: segment
    (segment index-of: "/") map: { Error panic!: "Not a valid path segment: " + segment };
    Join-Path { def parent  = parent
                def segment = segment }

  def + that
    unimplemented
    
  def / segment
    unimplemented

  def filename
    Result failure: "Can't extract a filename from " + this as-string
    
  def extension
    this filename map: (vm path/extension: _)

  def fold: f from: initial
    unimplemented    
    
  def relative?
    False

  def absolute?
    False
};

let Join-Path = Path {
  def path-string
    let parent = this parent path-string;
    (parent === "/") then: { parent + this segment }
                     else: { parent + "/" + this segment }

  def === that
    (this segment === that segment) && (this parent === that parent)

  def + path
    path fold: _ / _ from: this
    
  def / segment
    this from: this to: segment

  def parent
    this parent

  def filename
    Result ok: this segment

  def relative?
    this parent relative?

  def absolute?
    this parent absolute?

  def fold: f from: initial
    f call: (this parent fold: f from: initial) with: this segment
};

let Relative-Path = Path {
  def clone: #
    this

  def path-string
    "."

  def + path
    path
    
  def / segment
    this from: this to: segment
    
  def parent
    this / ".."

  def relative?
    True

  def fold: f from: initial
    initial
};

let Root-Path = Path {
  def clone: #
    this

  def path-string
    "/"
    
  def / segment
    this from: this to: segment
  
  def + that
    this / that

  def parent
    this

  def absolute?
    True

  def fold: f from: initial
    this
}