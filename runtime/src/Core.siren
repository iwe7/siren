#-----------------------------------------------------------------------
# 
# This source file is part of the Siren project.
#
# Copyright (C) 2013-2015 Quildreen Motta.
# Licensed under the MIT licence.
#
# See LICENCE for licence information.
# See CONTRIBUTORS for the list of contributors to the project.
#
#-----------------------------------------------------------------------
$siren/1
@portability: "portable"
@licence: "MIT"
@stability: Stability experimental
@authors: ["Quildreen Motta"]
module | vm | where

let authors = ["Quildreen Motta"].


# -- [ Object ] --------------------------------------------------------
vm after-runtime-configuration: {

  let object-mirror = Mirror reflect: Object.
  
  object-mirror meta
    category: "Core";
    authors: authors;
    portability: "portable";
    platforms: ["ECMAScript 2015"];
    licence: "MIT";
    stability: Stability experimental;
    documentation: """
    The [[Object]] is the basis of all computations in Siren's system.
    
    Objects are entities that know how to perform computation. One may ask
    an object to perform a particular operation by *sending it a
    message*. For example, one could send a `+` message to a number to have
    it perform arithmetic addition.
    
    The messages that an object understands, and the messages we can refer
    to are separate concepts in Siren. An object doesn't understand `+`, it
    understands a different thing that we can't really talk about directly.
    So, in order to send messages to an object, we must first translate from
    our concept of "messages" to the objects'. This translation is done by a
    [[Context]], which provides a mapping from our messages to the internal
    names objects use.
    
    Objects can be refined or extended to provide additional
    messages. Refining an object creates a new object, with a larger
    catalogue of message.
    
        let New-Object = Object refined-by: { ... } context: Context.
        New-Object some-new-message.
    
    Extending an object expands its catalogue of messages, but **does not**
    define the appropriate translations for those messages in the
    [[Context]], instead it returns a [[Perspective]], which can then be
    installed in any context.
    
        let perspective = Object extended-by: { ... } context: Context.
        use perspective in { Object some-new-message }.
    
    When an object doesn't understand a message, it'll send itself a
    `does-not-understand:` message, allowing one to define how this
    situation should be handled. By default the [[Object]] will stop the
    program and notify the user that it can't perform the operation, but any
    object may define a different behaviour for this message.
    """.
  
  object-mirror method-from-name: "does-not-understand:"; get!; meta;
    category: "Handling errors";
    documentation: """
    Allows defining how to handle errors resulting from sending messages
    to an object for which there isn't a translation in the [[Context]].
  
    This operation receives a [[Message]] object that describes which
    message was sent, and which parameters were sent with the message.
    """.
  
  object-mirror method-from-name: "perform:context:"; get!; meta;
    category: "Dynamic operations";
    documentation: """
    Allows performing a message by its name, which can be computed
    dynamically.
  
    This operation allows one to ask an object to perform a message by
    providing a [[Message]] object, containing the name of the message and
    the arguments for its execution, and a [[Context]] in which to resolve
    the name.
  
        1 + 2
  
        # Becomes:
  
        1 perform: (Message name: "+" arguments: [2]) context: Context.
    """.
  
  object-mirror method-from-name: "refined-by:context:"; get!; meta;
    category: "Refining";
    complexity: "O(n), n is the number of properties in object";
    see-also: "refined-by:" reason: "A refinement using the global context by default.";
    documentation: """
    Constructs a new object `O'` based on this object, such that `O'` is
    a strict superset of this object (i.e.: it contains all of the
    properties in this object, plus the new provided ones).
  
    It's necessary to provide a [[Context]] for the refinement. The
    context is used to figure out the original mapping from message names
    to message [[Selector]]s. This allows objects comming from different
    contexts to be used for refinements, rather than limiting this to
    literals.
    """.
  
  object-mirror method-from-name: "refined-by:"; get!; meta;
    category: "Refining";
    complexity: "O(n), n is the number of properties in object";  
    tags: ["Convenience"];
    see-also: "refined-by:context:" reason: "A refinement that allows providing a context for the message reconstruction.";
    documentation: """
    Constructs a new object based on the given object. Uses the global
    context to reconstruct the messages in the object.
    """.
  
  object-mirror method-from-name: "extended-by:context:"; get!; meta;
    category: "Extending";
    complexity: "O(n), n is the number of properties in object";  
    see-also: "extended-by:" reason: "An extensions that uses the global context";
    documentation: """
    Extends the object with new messages, as provided by the given
    [[object]] in the given [[Context]].
  
    Objects in Siren can be extended any time with new messages. Each
    extension creates a completely new internal message identifier, such
    that conflicts are impossible to happen. As a result of extending an
    object, you receive a [[Perspective]], which can be installed in a
    [[Context]] to use the extensions provided:
  
        let perspective = Integer extended-by: {
          def self double = self * 2.
        } context: Context.
  
        2 double.
        # => <Message Send Failure>: <Integer: 2> does not understand double.
  
        use perspective in {
          2 double
          # => <Integer: 4>
        }.
    """.
  
  object-mirror method-from-name: "extended-by:"; get!; meta;
    category: "Extending";
    complexity: "O(n), n is the number of properties in object";  
    tags: ["Convenience"];
    see-also: "extended-by:context:" reason: "An extension that allows you to provide a custom context.";
    documentation: """
    Extends the object with new messages as provided by the given [[object]].
    """.
  
  object-mirror method-from-name: "describe"; get!; meta;
    category: "Inspecting";
    documentation: "A textual representation for the object.".
}.


# -- [ Root ] ----------------------------------------------------------
vm after-runtime-configuration: {

  let root-mirror = Mirror reflect: Root.
  
  root-mirror meta
    category: "Core";
    authors: authors;
    portability: "portable";
    platforms: ["ECMAScript 2015"];
    licence: "MIT";
    stability: Stability experimental;
    documentation: """
    The global namespace in Siren.
    """.

  root-mirror method-from-name: "describe"; get!; meta;
    category: "Inspecting";
    documentation: """
    A textual representation of the object, for debugging.
    """
}.


# -- [ Module ] --------------------------------------------------------
vm after-runtime-configuration: {
  let mod-mirror = Mirror reflect: Module.

  mod-mirror meta;
    category: "Modularity";
    authors: authors;
    portability: "portable";
    platforms: ["ECMAScript 2015"];
    licence: "MIT";
    stability: Stability experimental;
    documentation: """
    Modules represent a set of logically grouped functionality and
    support loading dependencies.

    Siren's module system is very similar to Node.js's. A module
    maps directly to a file in an hierarchical file system, and
    has an associated [[Importer]] which can load dependencies
    relative to the module's location in the file system.
    """.

  mod-mirror method-from-name: "describe"; get!; meta;
    category: "Inspecting";
    documentation: """
    A textual representation of the object, for debugging.
    """.

  mod-mirror method-from-name: "filename"; get!; meta;
    category: "Extracting information";
    documentation: """
    The full path to the file where the module is defined.
    """.

  mod-mirror method-from-name: "context"; get!; meta;
    category: "Extracting information";
    documentation: """
    The top context in which objects defined in this module
    resolve their messages.
    """.

  mod-mirror method-from-name: "import"; get!; meta;
    category: "Constructing";
    documentation: """
    An [[Importer]] operating in the context of this module.
    """
}.


vm after-runtime-configuration: {
  let importer-mirror = Mirror reflect: Importer.

  importer-mirror meta;
    category: "Modularity";
    authors: authors;
    portability: portable;
    platforms: ["ECMAScript 2015"];
    licence: "MIT";
    stability: Stability experimental;
    documentation: """
    Supports loading objects from different locations and formats at
    runtime.

    An importer is associated with an [[Module]], and resolves all of its
    module paths in that context.
    """.

  importer-mirror method-from-name: "describe"; get!; meta;
    category: "Inspecting";
    documentation: """
    A textual representation of the object, for debugging.
    """.

  importer-mirror method-from-name: "siren:with-arguments:"; get!; meta;
    category: "Loading objects";
    tags: ["Loading siren"];
    documentation: """
    Loads a Siren module from the given `filename`, providing the
    tuple of arguments given.

    Module resolution works in the same way as Node modules.
    """.
}.


# -- [ Messaging ] -----------------------------------------------------
vm after-runtime-configuration: {
  let context-mirror = Mirror reflect: Context.

  context-mirror meta;
    category: "Messaging";
    authors: authors;
    portability: "portable";
    platforms: ["ECMAScript 2015"];
    licence: "MIT";
    stability: Stability experimental;
    documentation: """
    A mapping from message names in an object, to internal operation
    selectors.

    Siren is a contextual language. This means that we can't talk about
    message sends considering only an object — message sends are
    contextual, and because of this, it's not the object that defines
    what operation to invoke for a particular message, but a
    context. It's the context that says that `+` in scope X refers to
    the `internal-plus-operation` in Integers, for example.

    A context can be thought of as a set of triplets `(Object, Message
    name, Selector)`. 
    """.

  context-mirror method-from-name: "describe"; get!; meta;
    category: "Inspecting";
    documentation: """
    A textual representation of the object, for debugging.
    """.

  context-mirror method-from-name: "empty"; get!; meta;
    category: "Constructing";
    documentation: """
    Constructs a [[Context]] that has no mappings.

    Any message sends happening in this context will fail.
    """.

  context-mirror method-from-name: "with:"; get!; meta;
    category: "Combining";
    documentation: """
    Adds a new [[Perspective]] to the [[Context]].
    """.
}.

vm after-runtime-configuration: {
  let selector-mirror = Mirror reflect: Selector.

  selector-mirror meta;
    category: "Messaging";
    authors: authors;
    portability: "portable";
    platforms: ["ECMAScript 2015"];
    licence: "MIT";
    stability: Stability experimental;
    documentation: """
    Identifies internal operations in an object.

    In Siren, objects are a mapping from [[Selector]] to [[Methods]].
    Selectors are internal, and unique values, that don't really have
    a faithful representation. There are no selectors like `+`,
    `describe`, or any other common name — Siren maps these names to
    [[Selectors]] using [[Context]]s.

    Selectors do have an attached [[description]]. This description is
    only used for debugging purposes, and has no relationship with the
    names you use to send a message to an object.
    """.

  selector-mirror method-from-name: "with-description:"; get!; meta;
    category: "Constructing";
    documentation: """
    Constructs a new [[Selector]] with the given description.

    The constructed [[Selector]] is *unique*, which means that even if
    you give it the same description as another selector, they will be
    different selectors:

        let s1 = Selector with-description: "hello".
        let s2 = Selector with-description: "hello".
        s1 === s2   ==> False.
        s1 === s1   ==> True.
    """.

  selector-mirror method-from-name: "==="; get!; meta;
    category: "Comparing and testing";
    documentation: """
    Tests if two selectors are identical.
    """.

  selector-mirror method-from-name: "description"; get!; meta;
    category: "Inspecting";
    documentation: """
    A description of the purpose of the selector. Has no bearing on the
    behaviour of the selector, and is only meant for debugging.
    """.
}.


vm after-runtime-configuration: {
  let message-mirror = Mirror reflect: Message.

  message-mirror meta;
    category: "Messaging";
    authors: authors;
    portability: "portable";
    platforms: ["ECMAScript 2015"];
    licence: "MIT";
    stability: Stability experimental;
    documentation: """
    Represents message sends in Siren.

    A [[Message]] has a [[name]], which the common name of the message,
    like `"+"`, and some [[arguments]], which is a tuple with all the
    associated arguments to the message.

    For example, the message `object refined-by: a context: b` has as
    its name `"refined-by:context:"`, and its arguments the tuple
    `[a. b]`, and could be constructed as:

        Message name: "refined-by:context:" arguments: [a. b].

    Note that Siren doesn't construct messages for regular message
    passing, if it can avoid it. Messages are usually only constructed
    when a `does-not-understand:` message is sent.
    """.

  message-mirror method-from-name: "describe"; get!; meta;
    category: "Inspecting";
    documentation: """
    A textual representation of the object, for debugging.
    """.

  message-mirror method-from-name: "name:arguments:"; get!; meta;
    category: "Constructing";
    documentation: """
    Constructs a new message with the given name and arguments.
    """.

  message-mirror method-from-name: "send-to:context:"; get!; meta;
    category: "Messaging";
    documentation: """
    Sends the message to an object, in the given context.
    """.

  message-mirror method-from-name: "name"; get!; meta;
    category: "Extracting information";
    documentation: """
    
    """
}.




# -- Blocks ------------------------------------------------------------
vm extend: Nullary-Block with: {
  def self try
    vm try: { Result ok: self value }
       recover: { e | Result failure: (vm text: (vm object: e at: "message")) }.

  def self while: predicate
    vm while: { (predicate value) then: { vm true } else: { vm false } }
       do: self.
    Unit.
}.


# -- Modules -----------------------------------------------------------
vm extend: Importer with: {
  def self siren: id
    self siren: id with-arguments: [].
}.


# -- Branding ----------------------------------------------------------
let Branding = {
  def self traits {
    def_ Brand = Brand.
    def_ Object-Branding = Object-Branding.
  }

  def self for: object
    self traits Object-Branding { def_ object = object }
}.

vm extend: Root with: {
  def_ Branding = Branding.
}.

vm extend: Brand with: {
  def self describe
    Debug-Text,
    "<Brand: ", self description, ">".

  def self description
    "Root-Brand".

  def self with-description: description
    self { def _ description = description }.

  def self === brand
    vm if: (vm refeq: self and: brand)
       then: True
       else: False.
    
  def self is: brand
    vm if: (vm branding/brand: self is: brand)
       then: True
       else: False.
}.

vm extend: Object-Branding with: {
  def self describe
    Debug-Text,
    "<Branding for: ", self object describe, ">".

  def self has?: brand
    vm if: (vm branding/object: self object has: brand)
       then: True
       else: False.

  def self attach!: brand
    vm branding/object: self object attach: brand.
    self.

  def self remove!: brand
    vm branding/object: self object remove: brand.
    self.
}.


# -- Unit --------------------------------------------------------------
let Unit = {
  def self describe
    Debug-Text,
    "<Unit>".

  def self refined-by: _ context: _
    self.

  def self refined-by: _
    self.

  def self extended-by: _ context: _
    self.

  def self extended-by: _
    self.
}.

vm extend: Root with: {
  def_ Unit = Unit.
}.


# -- Exceptions --------------------------------------------------------
let Exception = {
  def self name = "Exception".

  def self name: name
    self { def_ name = name }.

  def self raise!: reason
    vm throw: (vm error: self name message: reason).
}.

let Unimplemented = Exception name: "<Unimplemented>".
let Message-Send-Failure = Exception name: "<Message Send Failure>".

vm extend: Root with: {
  def_ Exception = Exception.
  def_ Unimplemented = Unimplemented.
  def_ Message-Send-Failure = Message-Send-Failure.
}.

# -- Traits support ----------------------------------------------------
let Traits = {}.

vm extend: Root with: {
  def_ traits = Traits.
}.


# -- Utility decorators / messages -------------------------------------
vm extend: Root with: {
  def_ unimplemented
    Unimplemented raise!: "unimplemented".

  def_ lazy { fn |
    let computed = Reference new: False.
    let data = Reference new: Unit.
    let update = { o a | data set!: (fn in: o apply: a). computed set!: True }.
    Method {
      def self in: object apply: args = data.
        computed then: { data value }
                 else: { update call: object with: args. data value. }

      def self in: object                         = self in: object apply: [].
      def self in: object call: a                 = self in: object apply: [a].
      def self in: object call: a with: b         = self in: object apply: [a. b].
      def self in: object call: a with: b with: c = self in: object apply: [a. b. c].
    }.
  }

  def_ value { fn |
    let data = fn in: Unit apply: [].
    Method {
      def self in: _ apply: _ = data.
      def self in: _ = data.
      def self in: _ call: _ = data.
      def self in: _ call: _ with: _ = data.
      def self in: _ call: _ with: _ with: _ = data.
    }.
  }

  def_ brand: brand { object |
    (Branding for: object) attach!: brand.
    object.
  }

  def_ mixin: mixin { object |
    let o2 = object refined-by: {}.
    vm extend: o2 with: mixin.
    o2
  }

  def_ required { method |
    @inherit-meta: method
    let expectation = Method {
      def self in: object apply: _
        let mirror      = Mirror reflect: method.
        let object-name = Mirror reflect: object; meta name; get-or-default: "(Anonymous object)".
        let method-name = mirror meta name get-or-default: "(Anonymous method)".

        Message-Send-Failure raise!:
          object-name, " does not define `", method-name, "`. ",
          "You must either refine ", object-name, " and provide ",
          "the missing message, or mix it in another object that ",
          "defines this message. ", object-name, " cannot be used ",
          "directly.\n",
          "\n",
          "## Example:\n\n",
          "    Old-Object { def ", method-name, " = ... }.",
          "\n\n",
          "Or:\n\n",
          "    @mixin: Old-Object\n",
          "    let New-Object = { def ", method-name, " = ... }.".

      def self in: object                         = self in: object apply: [].
      def self in: object call: a                 = self in: object apply: [a].
      def self in: object call: a with: b         = self in: object apply: [a. b].
      def self in: object call: a with: b with: c = self in: object apply: [a. b. c].
    }.
    Mirror reflect: expectation; meta; at: "expectation.unfulfilled" put: True.
    expectation
  }
}