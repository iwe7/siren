(**********************************************************************
 *
 * This source file is part of the Siren project.
 *
 * Copyright (C) 2013-2015 Quildreen Motta.
 * Licensed under the MIT licence.
 *
 * See LICENCE for licence information.
 * See CONTRIBUTORS for the list of contributors to the project.
 *
 **********************************************************************)
module | vm | where
(*
The Meta library provides facilities for decorating objects with
meta-data.
 *)

vm define-global: "Meta" as: { Meta };

let Meta = {
  def for: object at: name put: value
    vm meta/for: object at: name put: value;
    object

  def at: name put: value
    { object | this for: object at: name put: value }

  def category: name
    (* Categorises an object. *)
    this at: "category" put: name

  def name: name
    (* Names an object *)
    this at: "name" put: name

  def version: version
    (* Versions an object. *)
    this at: "version" put: version

  def documentation: text
    (* Provides documentation for a value. *)
    this at: "documentation" put: text

  def example: code
    (* Provides example usage for the function. *)
    { object | let examples = vm meta/for: object at: "examples";
               vm if: (vm failed?: examples)
                  then: { this for: object at: "examples" put: [code] }
                  else: { this for: object at: "examples" put: (vm array: examples concat: [code]) }
                  >> value }
}