#-----------------------------------------------------------------------
# 
# This source file is part of the Siren project.
#
# Copyright (C) 2013-2015 Quildreen Motta.
# Licensed under the MIT licence.
#
# See LICENCE for licence information.
# See CONTRIBUTORS for the list of contributors to the project.
#
#-----------------------------------------------------------------------
$siren/1
module | vm | where

# -- Associations ------------------------------------------------------
let Association = {
  def self describe
    Debug-Text, "<Association: ", self key describe, " => ", self value describe, ">".
}.

vm extend: Object with: {
  def self => value
    Association {
      def_ key   = self.
      def_ value = value.
    }.
}.

vm extend: traits with: {
  def_ Association = Association.
}.

# -- Tuples ------------------------------------------------------------
vm extend: Tuple with: mixins Foldable.
vm extend: Tuple with: mixins Arithmetic-Foldable.

vm extend: Tuple with: {
  def self describe
    let concat = { acc x | acc === "" then: { x describe }
                                      else: { acc, ". ", x describe }}.
    Debug-Text, "[", (self from: "" fold-with: concat), "]".

  def self as-text
    "[", (self map: _ as-text; joined-by: ", "), "]"

  def self at: offset
    (offset < 1) || (offset > self length) then: {
      Result failure: "Expected ", offset describe, " to be between 1 and ", self length as-text.
    } else: {
      Result ok: (vm tuple: self at: offset).
    }

  def self at!: offset
    vm assert/numeric: offset.
    vm assert/number: offset between: 1 and: self length.
    vm tuple: self at: offset.

  def self first
    self empty? not then: { Result ok: (self at!: 1) }
                    else: { Result failure: "Can't take the first of an empty tuple." }.

  def self first!
    self first get!

  def self last
    self empty? not then: { Result ok: (self at!: self length) }
                    else: { Result failure: "Can't take the last of an empty tuple." }.

  def self last!
    self last get!

  def self empty
    [].

  def self empty?
    self length === 0.

  def self === other-tuple
    self length =/= other-tuple length then: {
      False
    } else: {
      self from: [1. True] fold-with: { acc x |
        let index = acc first!.
        let result = acc last!.
        [index successor. result && (x === (other-tuple at!: index))].
      }; last!.
    }

  @category: "Building tuples"
  @complexity: "O(n)"
  @platforms: ["ECMAScript 5"]
  @licence: "MIT"
  @stability: Stability stable
  @example: { [], [1. 2]     ==> [1. 2]       }
  @example: { [1. 2], [3. 4] ==> [1. 2. 3. 4] }
  def self, tuple
    # Concatenates two tuples.
    vm assert/tuple: tuple.
    vm tuple: self concat: tuple.

  def self length
    vm tuple/size: self.

  def self each: block
    vm tuple: self each: block.
    self.

  def self map: transformation
    vm tuple: self map: transformation.

  def self chain: transformation
    vm tuple: self chain: transformation.

  def self filter: transformation
    vm tuple: self
       filter: { a | (transformation call: a) then: { vm true } else: { vm false }}.

  def self without: predicate
    self filter: { x | (predicate call: x) not }.

  def self slice-from: start to: end
    let start' = start < 1 then: { 1 } else: { start }.
    
    end >= start' then: {
      vm tuple: self
         slice-from: (start clamp-between: 1 and: self length)
         to: (end clamp-between: 1 and: self length).
    } else: {
      [].
    }.

  def self without-last
    self slice-from: 1 to: self length - 1.

  def self without-first
    self slice-from: 2 to: self length.


  def self every?: predicate
    self from: True fold-with: _ && _.

  def self some?: predicate
    self from: False fold-with: _ || _.

  def self from: initial fold-with: combinator
    vm tuple: self fold: combinator from: initial.

  def self from: initial reverse-fold-with: combinator
    vm tuple: self fold-right: combinator from: initial.

  def self reverse
    vm tuple/reverse: self.

  def self sorted-by: comparator
    vm tuple: self
       sort: { a b | (comparator call: a with: b) match: {
                       def_ less-than    = -1
                       def_ equal        =  0
                       def_ greater-than =  1
                     }}.

  def self sorted
    self sorted-by: { a b | a compared-to: b }.

  def self joined-by: separator
    self from: "" fold-with: { acc x |
      acc empty? then: { acc, x }
                 else: { acc, separator, x }
    }.

  def self zip: tuple with: zipper
    vm assert/tuple: tuple.
    self length =/= tuple length then: { vm assert/fail: "Cannot zip tuples of different length." }.
    self from: [1. []] fold-with: { acc x |
      let index = acc first!.
      let result = acc last!.
      [index successor. result, [zipper call: x with: (tuple at!: index)]].
    }; last!.

  def self flattened
    self from: [] fold-with: _, _.

  def self interleaved-with: tuple
    vm assert/tuple: tuple.
    self zip: tuple with: { a b | [a. b] }; flattened.

  def self associated-with: key
    self each: { x | x key === key then: { ^ Result ok: x value } }.
    Result failure: "(No key ", key describe, ")".

  def self associate: key with: value
    let new = do {
      old <- self associated-with: key.
      return self without: { p | Mirror reflect: p value; is: old }.
    } get-or-default: self.
    new, [ key => value ].

  def self grouped-by: categoriser
    let map = Reference new: [].
    self each: { x |
      let category = categoriser call: x.
      let xs = map value associated-with: category; get-or-default: [].
      map set!: (map value associate: category with: xs, [x]).
    }.
    map value.
}.


# -- Ranges ------------------------------------------------------------
let Range = {
  def self describe
    Debug-Text, "<Range from: ", self start describe, " to: ", self end describe, ">".

  def self as-tuple
    let result = [].
    self each: { index | vm tuple: result push: index }.
    result.

  def self contains?: number
    (number >= self start) && (number <= self end).

  def self each: block
    let index = Reference new: self start.
    {
      block call: index value.
      index set!: index value successor.
    } while: { index value <= self end }.
    self.
}.

vm extend: traits with: {
  def_ Range = Range.
}.

vm extend: Integer with: {
  def start to: end
    traits Range {
      def_ start = start.
      def_ end   = end.
    }
}.

vm extend: Float-64bits with: {
  def start to: end
    traits Range {
      def_ start = start.
      def_ end   = end.
    }
}