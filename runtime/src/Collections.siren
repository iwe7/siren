#-----------------------------------------------------------------------
# 
# This source file is part of the Siren project.
#
# Copyright (C) 2013-2015 Quildreen Motta.
# Licensed under the MIT licence.
#
# See LICENCE for licence information.
# See CONTRIBUTORS for the list of contributors to the project.
#
#-----------------------------------------------------------------------
module | vm | where

# -- Associations ------------------------------------------------------
let Association = {
  def self describe
    "<Association: ", self key describe, " => ", self value describe, ">".
}.

vm extend: Object with: {
  def self => value
    Association {
      def_ key   = self.
      def_ value = value.
    }.
}.

vm extend: traits with: {
  def_ Association = Association.
}.

# -- Tuples ------------------------------------------------------------
vm extend: Tuple with: {
  def self describe
    let concat = { acc x | acc empty? then: { x describe }
                                      else: { acc, ". ", x describe }}.
    "[", (self from: "" fold-with: concat), "]".

  def self at: offset
    vm assert/numeric: offset.
    vm assert/number: offset between: 1 and: self length.
    vm tuple: self at: offset.

  def self first
    self empty? not then: { Result ok: (self at: 1) }
                    else: { Result failure: "Can't take the first of an empty tuple." }.

  def self first!
    self first get!

  def self last
    self empty? not then: { Result ok: (self at: self length) }
                    else: { Result failure: "Can't take the last of an empty tuple." }.

  def self last!
    self last get!

  def self empty
    [].

  def self empty?
    self length === 0.

  def self, tuple
    vm assert/tuple: tuple.
    vm tuple: self concat: tuple.

  def self length
    vm tuple/size: self.

  def self map: transformation
    vm tuple: self map: transformation.

  def self chain: transformation
    vm tuple: self chain: transformation.

  def self filter: transformation
    vm tuple: self
       filter: { a | (transformation call: a) then: { vm true } else: { vm false }}.

  def self every?: predicate
    self from: True fold-with: _ && _.

  def self some?: predicate
    self from: False fold-with: _ || _.

  def self from: initial fold-with: combinator
    vm tuple: self fold: combinator from: initial.

  def self from: initial reverse-fold-with: combinator
    vm tuple: self fold-right: combinator from: initial.

  def self reverse
    vm tuple/reverse: self.

  def self sorted-by: comparator
    vm tuple: self
       sort: { a b | (comparator call: a with: b) match: {
                       def_ less-than    = -1
                       def_ equal        =  0
                       def_ greater-than =  1
                     }}.

  def self sorted
    self sorted-by: { a b | a compared-to: b }.  
}.


# -- Ranges ------------------------------------------------------------
let Range = {
  def self describe
    "<Range from: ", self start describe, " to: ", self end describe, ">".

  def self as-tuple
    let result = [].
    self each: { index | vm tuple: result push: index }.
    result.

  def self contains?: number
    (number >= self start) && (number <= self end).

  def self each: block
    let index = Reference new: self start.
    {
      block call: index value.
      index set!: index value successor.
    } while: { index value <= self end }.
    self.
}.

vm extend: traits with: {
  def_ Range = Range.
}.

vm extend: Integer with: {
  def start to: end
    traits Range {
      def_ start = start.
      def_ end   = end.
    }
}.

vm extend: Float-64bits with: {
  def start to: end
    traits Range {
      def_ start = start.
      def_ end   = end.
    }
}