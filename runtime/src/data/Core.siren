module | vm | where

(* Things inheriting from Object.prototype *)
vm apply-trait-globally: extend vm native-object with {
  def as-string
    "<Object>"

  def === that
    vm if: (vm object: this equals?: that)
       then: True
       else: False

  def =/= that
    (this === that) not
  
  def does-not-understand: message with-arguments: args
    let m1 = vm string: this as-string concat: " does not understand ";
    let m2 = vm string: m1 concat: message;
    let m3 = vm string: m2 concat: "\nIt was given the arguments:";
    let m4 = vm string: m3 concat: args as-string;
    let m5 = vm string: m4 concat: ", but is unable to perform any computation.
Possible causes for this are:

 *  Mistyping the message name;
 *  Sending the message to the wrong object;
 *  Not importing the correct traits in the current scope.";
    Error panic!: m5

  def clone: value
    vm make-object: value inheriting: this
};

(* Root object from which all Siren objects (besides blocks) descend *)
vm apply-trait-globally: extend Root with {
  def as-string
    "<Root>"
};

(* No value *)
vm define-global: "Unit" as: { Unit };

let Unit = {
  def as-string
    "<Unit>"
};

(* Other special objects *)
vm define-global: "Singleton" as: { Singleton };

let Singleton = {
  def clone: anything
    this
};

vm define-global: "unimplemented" as: {
  Error panic!: "Unimplemented."
};

vm define-global: "lazy" as: {
  { fn | let data = vm false;
         let update = { data = fn value; data };
         { vm if: data then: data else: update value } }
};

(* Ordering *)
vm define-global: "Ordering" as: { Ordering };
let Ordering = Singleton {
  def less-than
    Less-Than

  def greater-than
    Greater-Than

  def equal
    Equal
};

let Less-Than = Singleton {
  def match: pattern
    pattern less-than
};

let Greater-Than = Singleton {
  def match: pattern
    pattern greater-than
};

let Equal = Singleton {
  def match: pattern
    pattern equal
}