module | root vm | where

vm define-global: "Boolean" as: { Boolean };
let Boolean = { };

vm define-global: "True" as: { True };
let True = Boolean {
  def as-string
    "True"

  @Meta example: { True && False === False }
  @Meta example: { True && True === True }
  def && that
    that

  @Meta example: { True || False === True }
  @Meta example: { True || True === True }
  def || that
    this

  @Meta example: { True not === False }
  def not
    False

  @Meta example: { (True then: { "ok" } else: { "nay" }) === "ok" }
  def then: consequent else: alternate
    consequent value

  def unless: alternate
    Unit

  def then: consequent
    consequent value;
    Unit
};

vm define-global: "False" as: { False };
let False = Boolean {
  def as-string
    "False"

  def && that
    this

  def || that
    that

  def not
    True

  def then: consequent else: alternate
    alternate value

  def then: consequent
    Unit

  def unless: alternate
    alternate value;
    Unit
};

vm foreign/convert: True as: { # | vm true };
vm foreign/convert: False as: { # | vm false }