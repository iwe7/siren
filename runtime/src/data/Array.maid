module | root vm | where

vm define-global: "Array" as: { vm native-array };

vm apply-trait-globally: extend Array with {
  def as-string
  "[" + (this join: ", ") + "]"

  def new: size with: value
    vm array/new: size with: value

  def new: size
    this new: size with: Unit
  
  (* Testing *)
  def empty?
    this length === 0
  
  (* Accessing *)
  def at: index
  vm array: this at: index

  def at: index put: value
  this copy at: index put!: value
  
  def at: index put!: value
  vm array: this at: index put: value;
  this

  def remove-at: index
  this copy remove-at!: index
  
  def remove-at!: index
  vm array: this remove-at: index;
  this

  def remove-all!
    vm object: this at: "length" put: 0
  
  def remove: value
    this copy remove!: value
  
  def remove!: value
    this index-of: value >> map: (this remove-at!: _);
    this
  
  (* Collection operations *)
  def length
  vm array/length: this

  def + that
  vm array: this concat: that

  def index-of: value
  let index = vm array: this index-of: value;
  (index === 0) then: { Result failure: "Not found." }
                else: { Result ok: index }

  def find: value
    this index-of: value >> map: (this at: _)
                
  def last-index-of: value
  let index = vm array: this last-index-of: value;
  (index === 0) then: { Result failure: "Not found." }
                else: { Result ok: index }

  def join: separator
  vm array: (this map: _ as-string) join: separator

  def copy
  vm array/shallow-copy: this

  (* Iteration *)
  def each: computation
  vm array: this each: { a | computation call: a };
  this

  def map: computation
  vm array: this map: { a | computation call: a }

  def filter: predicate
  vm array: this filter: { a | (predicate call: a) then: { vm true } else: { vm false } }
  
  (* Mutation *)
  def append: value
  this copy push!: value

  def append!: value
  vm array: this push: value;
  this

  def take-last
    this copy take-last!

  def take-last!
    vm array/pop: this

  def prepend: value
  this copy prepend!: value

  def prepend!: value
  vm array: this unshift: value;
  this

  def take-first
    this copy take-first!

  def take-first!
    vm array/shift: this
    

  def reverse
  this copy reverse!

  def reverse!
  vm array/reverse: this;
  this

  def sort-by: comparator
  this copy sort-by!: coparator

  def sort-by!: comparator
  vm array: this sort: { left right |
    comparator call: left with: right >> match: {
      def less-than    -1
      def equal         0
      def greater-than  1
    }
  };
  this
  
}