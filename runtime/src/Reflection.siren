#-----------------------------------------------------------------------
# 
# This source file is part of the Siren project.
#
# Copyright (C) 2013-2015 Quildreen Motta.
# Licensed under the MIT licence.
#
# See LICENCE for licence information.
# See CONTRIBUTORS for the list of contributors to the project.
#
#-----------------------------------------------------------------------
$siren/1
module | vm | where

vm extend: Root with: {
  def_ Mirror = Mirror.
}.

let Mirror = {
  def self describe
    Debug-Text, "<Mirror>".

  def_ Stability = Stability.

  def_ traits {
    def_ Object-Mirror = Object-Mirror.
    def_ Meta-Mirror = Meta-Mirror.
  }

  def self reflect: object context: context
    self traits Object-Mirror {
      def_ reflectee = object.
      def_ reflectee-context = context.
    }.

  def self reflect: object
    self reflect: object context: vm global-context
}.

let Object-Mirror = Mirror {
  def self describe
    Debug-Text, "<Object-Mirror on: ", self reflectee describe, " context: ", self reflectee-context describe, ">".

  def self meta
    self traits Meta-Mirror {
      def_ reflectee = self reflectee.
    }.

  def self methods
    let xs = vm reflect/methods: self reflectee context: self reflectee-context.
    xs map: { pair | pair first! => pair last! }.

  def self selector-from-name: name
    vm assert/text: name.
    let selector = vm reflect/method-selector: name
                      on: self reflectee
                      in: self reflectee-context.
    vm if: (vm failed?: selector)
       then: { Result failure: "No such method: ", name }
       else: { Result ok: selector };
       value.

  def self method-for-name: name do {
    selector <- self selector-from-name: name.
    self method-for-selector: selector.
  }

  def self method-for-selector: selector
    vm assert/selector: selector.
    let result = vm reflect/method-for-selector: selector on: self reflectee.
    vm if: (vm failed?: result)
       then: { Result failure: "No such method: ", selector description }
       else: { Result ok: result };
       value.

  def self responds-to?: name
    (self method-for-name: name) then: { True } else: { False }.

  def self parent
    let result = vm reflect/parent: self reflectee.
    vm if: (vm failed?: result)
       then: { Result failure: "No parent." }
       else: { Result ok: result };
       value.

  def self is: object
    vm if: vm refeq: self reflectee and: object
       then: True else: False.

  def self belongs-to
    let result = vm reflect/belongs-to: self reflectee.
    vm if: (vm failed?: result)
       then: { Result failure: "Free object." }
       else: { Result ok: result };
       value.
}.

let Meta-Mirror = {
  def_ traits {
    def_ Source-Location = Source-Location.
    def_ See-Also = See-Also.
  }

  def self describe
    Debug-Text, "<Meta-Mirror on: ", self reflectee describe, ">".

  def self at: name
    vm assert/text: name.
    let result = vm meta: self reflectee at: name.
    vm if: (vm failed?: result)
       then: { Result failure: "No meta-data ", name }
       else: { Result ok: result };
       value.

  def self at: name put: value
    vm assert/text: name.
    vm meta: self reflectee at: name put: value.
    self.

  def self name
    self at: "name".

  def self name: name
    vm assert/text: name.
    self at: "name" put: name.

  def self arguments
    self at: "arguments".

  def self arguments: args
    vm assert/tuple: args.
    self at: "arguments" put: args.

  def self source
    self traits Source-Location {
      def_ code      = self at: "source".
      def_ start     = self at: "start-offset".
      def_ end       = self at: "end-offset".
      def_ line      = self at: "line".
      def_ column    = self at: "column".
      def_ filename  = self at: "filename".
    }.

  def self source: source
    self at: "source" put: source code.
    self at: "start-offset" put: source start.
    self at: "end-offset" put: source end.
    self at: "line" put: source line.
    self at: "column" put: source column.
    self at: "filename" put: source filename.
    self.

  def self category
    self at: "category".

  def self category: category
    vm assert/text: category.
    self at: "category" put: category.

  def self tags
    self at: "tags".

  def self tags: tags
    vm assert/tuple: tags.
    self at: "tags" put: tags.

  def self documentation
    self at: "documentation".

  def self documentation: docs
    vm assert/text: docs.
    self at: "documentation" put: docs.

  def self examples
    self at: "examples".

  def self examples: examples
    vm assert/tuple: examples.
    self at: "examples" put: examples.

  def self authors
    self at: "authors".

  def self authors: authors
    vm assert/tuple: authors.
    self at: "authors" put: authors.

  def self licence
    self at: "licence".

  def self licence: licence
    self at: "licence" put: licence.

  def self deprecated
    self at: "deprecated".

  def self deprecated: reason
    vm assert/text: reason.
    self at: "deprecated" put: reason.
    self stability: Stability deprecated.

  def self since
    self at: "since".

  def self since: version
    self at: "since" put: version.

  def self platforms
    self at: "platforms".

  def self platforms: platforms
    vm assert/tuple: platforms.
    self at: "platforms" put: platforms.

  def self repository
    self at: "repository".

  def self repository: repository
    self at: "repository" put: repository.

  def self see-also
    self at: "see-also".

  def self see-also: items
    vm assert/tuple: items.
    self at: "see-also" put: items.

  def self see-also: object reason: reason
    do { 
      items <- self see-also.
      return self see-also: items, self traits See-Also {
        def_ reference = object.
        def_ reason = reason.
      }
    }.
    self.

  def self stability
    self at: "stability".

  def self stability: stability
    self at: "stability" put: stability.

  def self portability
    self at: "portability".

  def self portability: portability
    self at: "portability" put: portability.

  def self complexity
    self at: "complexity".

  def self complexity: complexity
    self at: "complexity" put: complexity.

  def self signature do {
    name <- self name.
    arguments <- self arguments.
    name-and-args <- return format-signature call: name with: arguments.
    return "def ", (name-and-args joined-by: " ")
  }
}.

let format-signature = { name args |
  (name contains?: ":") then: {
    args interleaved-with: (name split-at: ":"; map: _, ":"); filter: _ =/= ":".
  } else: {
    args length === 0 then: {
      [name].
    } else: { args length === 1 then: {
      [args first!. name].
    } else: { args length === 2 then: {
      [args first!. name. args last!].
    } else: {
      ["(Can't format signature)"].
    }}}
  }
}.

let See-Also = {

}.

let Stability = {
  def_ traits {
    def_ Stability-Trait {
      def self describe
        Debug-Text, "<Stability: ", self index as-string, " - ", self name, ">".

      def self explain
        "Stability: ", self index as-string, " - ", self name, "\n\n", self description
    }
  }


  def self deprecated = self traits Stability-Trait {
    def self index = 0.
    def self name = "Deprecated".
    def self description = "This feature is known to be problematic and will either be entirely removed from the system, or completely redesigned. You should not rely on it."
  }

  def self experimental = self traits Stability-Trait {
    def self index = 1.
    def self name = "Experimental".
    def self description = "This feature is experimental and likely to change (or be removed) in the future.".
  }

  def self stable = self traits Stability-Trait {
    def self index = 2.
    def self name = "Stable".
    def self description = "This feature is stable and its API is unlikely to change (unless it's necessary for security, or other important reasons). You should expect backwards compatibility with the system, and a well-defined and automated (if possible) migration path if it changes.".
  }

  def self locked = self traits Stability-Trait {
    def self index = 3.
    def self name = "Locked".
    def self description = "This API will not change, however security and other bug fixes will still be applied to this feature."
  }
}.

let Source-Location = {
  def self describe
    Debug-Text,
    "<Source-Location at line ", self line describe, ", column ", self column describe, " in ", self filename describe, ">".

  def self source: code
    self { def_ source = code }.

  def self start: n
    vm assert/numeric: n.
    self { def_ start = n }.

  def self end: n
    vm assert/numeric: n.
    self { def_ end = n }.

  def self filename: name
    self { def_ filename = name }.
}.

vm extend: Root with: {
  def_ name: name { object |
    Mirror reflect: object; meta; name: name.
    object.
  }

  def_ category: category { object |
    Mirror reflect: object; meta; category: category.
    object.
  }

  def_ tags: tags { object |
    Mirror reflect: object; meta; tags: tags.
    object.
  }

  def_ documentation: docs { object |
    Mirror reflect: object; meta; documentation: docs.
    object.
  }

  def_ examples: examples { object |
    Mirror reflect: object; meta; examples: examples.
    object.
  }

  def_ example: example { object |
    let meta = Mirror reflect: object; meta.
    let examples = meta examples get-or-default: [].
    meta examples: (vm tuple: examples concat: [example]).
    object.
  }

  def_ complexity: complexity { object |
    Mirror reflect: object; meta; complexity: complexity.
    object.
  }.

  def_ portability: portability { object |
    Mirror reflect: object; meta; portability: portability.
    object.
  }.

  def_ stability: stability { object |
    Mirror reflect: object; meta; stability: stability.
    object.
  }.

  def_ see-also: reference reason: reason { object |
    Mirror reflect: reference; meta; see-also: reference reason: reason.
    object.
  }.

  def_ repository: repository { object |
    Mirror reflect: object; meta; repository: repository.
    object.
  }

  def_ platforms: platforms { object |
    Mirror reflect: object; meta; platforms: platforms.
    object.
  }.

  def_ since: version { object |
    Mirror reflect: object; meta; since: version.
    object.
  }.

  def_ deprecated: reason { object |
    Mirror reflect: object; meta; deprecated: reason.
    object.
  }.

  def_ licence: licence { object |
    Mirror reflect: object; meta; licence: licence.
    object.
  }.

  def_ authors: authors { object |
    Mirror reflect: object; meta; authors: authors.
    object.
  }.
}.

