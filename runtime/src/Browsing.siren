#-----------------------------------------------------------------------
# 
# This source file is part of the Siren project.
#
# Copyright (C) 2013-2015 Quildreen Motta.
# Licensed under the MIT licence.
#
# See LICENCE for licence information.
# See CONTRIBUTORS for the list of contributors to the project.
#
#-----------------------------------------------------------------------
$siren/1

@authors: ["Quildreen Motta"]
@licence: "MIT"
@platforms: ["ECMAScript 2015"]
@stability: Stability experimental
module | vm | where


vm extend: Root with: {
  def_ browse = Browser.
}.


@category: "Inspecting"
@tags: ["Documentation". "Browsing"]
@documentation: """
The [[Browser]] allows an user to learn about the objects in the
system, be it by finding objects that can do the tasks they want
to, or by inspecting information about what they can do with
an object.

A browser looks at an [[Object]] in a particular [[Context]]. Both
the context and the object may be refined while you interact
with the browser, in a "navigation" kind-of way. By default, the
browser looks at the global object ([[Root]]) in the global
context.
"""
let Browser = {
  @category: "Inspecting"
  def self describe
    # A textual representation of this object.
    Debug-Text,
    "<Browser for: ", self object describe, ">".


  @category: "Configuration"
  def_ context
    # The [[Context]] in which messages displayed by the browser
    # will be resolved.
    vm global-context

  @category: "Configuration"
  def_ object
    # The object you're browsing at the moment.
    Root.

  @category: "Configuration"
  def_ display
    # The object used to display information in the browser.
    Browser-Default-Display.

  @category: "Configuration"
  def_ message-browser
    # The browser used for displaying messages.
    Message-Browser

  @category: "Configuration"
  def self mirror
    # The mirror object used to inspect the internals of objects.
    Mirror reflect: self object context: self context.


  @category: "Refining"
  def self context: context
    # Defines the [[Context]] in which the messages displayed by the
    # browser will be resolved.
    self { def_ context = context }.

  @category: "Refining"
  def self object: object
    # Defines the object to browse.
    self { def_ object = object }.

  @category: "Refining"
  def self message: message
    # Browses the given message in the object this browser is pointing to.
    let method = self mirror method-from-name: message; get!; reflectee.
    self message-browser { def_ object = method }.


  @category: "Visualising"
  def self inspect
    # Inspects the object this browser is pointing to.
    let name = self mirror meta name get-or-default: "(Anonymous object)".
    self display heading!: name.
    self location.
    self common-metadata.
    self display line-break!.
    
    self documentation.
    self display line-break!.
    self stability.

    self messages.
    self.


  @category: "Visualising"
  def self documentation
    # Displays the documentation of the object the browser is pointing to.
    let doc = self mirror meta documentation get-or-default: "(No documentation)".
    self display markdown!: doc.
    self.


  @category: "Visualising"
  def self common-metadata
    # Inspects common metadata in the object the browser is pointing to.
    let meta = self mirror meta.
    meta category map: { c | self display label: "Category" text!: c as-text }.
    meta tags map: { t | self display label: "Tags" text!: t as-text }.
    meta since map: { v | self display label: "Since" text!: "version ", v as-text }.
    meta platforms map: { p | self display label: "Platforms" text!: p as-text }.
    meta licence map: { l | self display label: "Licence" text!: l as-text }.
    meta repository map: { r | self display label: "Repository" text!: r as-text }.
    meta portability map: { p | self display label: "Portability" text!: p as-text }.
    self.


  @category: "Visualising"
  def self stability
    # Inspects the stability meta-data of the object the browser is pointing to.
    let meta = self mirror meta.
    meta stability map: { s |
      self display markdown!: s explain.
      self display line-break!
    }.
    self.


  @category: "Visualising"
  def self location
    # Displays source meta-data about the object the browser is pointing to.
    let source = self mirror meta source.
    let position = do {
      line <- source line. column <- source column.
      return " at line ", line as-text, ", column ", column as-text
    } get-or-default: "".

    source filename map: { file |
      self display label: "From" text!: file, position.
    }.
    self.
    

  @category: "Visualising"
  def self source
    # Displays source code from the object the browser is pointing to.
    let code = self mirror meta source code get-or-default: "(No source code)".
    let name = self mirror meta name get-or-default: "(Anonymous object)".
    self display sub-heading!: "Source for ", name.
    self display markdown!: "```ruby\n", code, "\n```".
    self.


  @category: "Visualising"
  def self examples
    # Displays examples for the object the browser is pointing to.
    self mirror meta examples map: { examples |
      examples length > 0 then: {
        self display sub-heading!: "Examples".
        examples each: { example |
          let example-mirror = self mirror reflect: example context: self context.
          example-mirror meta source code map: { code |
            self display markdown!: "```ruby\n", code, "\n```".
            self display line-break!.
          }.
        }.
      }.
    }.
    self.

  @category: "Visualising"
  def self messages
    # Displays the messages of the object the browser is pointing to.
    let category = { m | m meta category get-or-default: "(Uncategorised)" }.
    let show-messages = { mirror |
      mirror methods map: _ value;
                     grouped-by: category;
                     sorted-by: { a b | a key compared-to: b key };
                     each: { pair |
                       self display line-break!.
                       self display minor-heading!: pair key.
                       pair value each: { method |
                         let signature = self display signature: method.
                         signature map: { s | self display line!: "  â€¢ ", s }.
                       }
                     }.

      self display line-break!.
      mirror parent map: { parent |
        let name = parent meta name get-or-default: "(Anonymous object)".
        self display sub-heading!: "Inheriting from ", name.
        show-messages call: parent.
      }.
    }.

    let name = self mirror meta name get-or-default: "(Anonymous object)".
    self display sub-heading!: "Messages in ", name.
    show-messages call: self mirror.
    self.
}.


@documentation: """
A browser for visualising details about messages.
"""
let Message-Browser = Browser {
  def self describe
    # A textual representation of this object.
    Debug-Text,
    "<Message-Browser for: ", self object describe, ">".

  @category: "Visualising"
  def self inspect
    # Inspects the message this browser is pointing to.
    let signature = self display signature: self mirror; recover: { _ |
                      self mirror meta name
                    }; get-or-default: "(Anonymous method)".

    self display sub-heading!: "def ", signature.
    self display line-break!.
    self documentation.
    self display line-break!.
    self source.
    self examples.
    self definition-site.    
    self location.
    self common-metadata.
    self display line-break!.
    self stability.
    self.


  @category: "Visualising"
  def self definition-site
    # Shows the object the method has been defined at
    self mirror belongs-to map: { object |
      let name = object meta name get-or-default: "(Anonymous object)".
      let source = object meta source.
      let position = do {
        line <- source line. column <- source column.
        return " at line ", line as-text, ", column ", column as-text
      } get-or-default: "".
      let file = source filename map: " in ", _; get-or-default: "".

      self display label: "Belongs to" text!: name, file, position.
    }.
    self.


  @category: "Visualising"
  def self common-metadata
    # Inspects common metadata in the object the browser is pointing to.
    let meta = self mirror meta.
    meta complexity map: { c | self display label: "Complexity" text!: c as-text }.
    meta category map: { c | self display label: "Category" text!: c as-text }.
    meta tags map: { t | self display label: "Tags" text!: t as-text }.
    meta since map: { v | self display label: "Since" text!: "version ", v as-text }.
    meta platforms map: { p | self display label: "Platforms" text!: p as-text }.
    meta licence map: { l | self display label: "Licence" text!: l as-text }.
    meta repository map: { r | self display label: "Repository" text!: r as-text }.
    meta portability map: { p | self display label: "Portability" text!: p as-text }.
    self.
    
}.


@documentation: """
The default visualisation for the browser.
"""
let Browser-Default-Display = {
  def self heading!: text
    Console write-line!: (vm terminal-heading: text).
    Console write-line!: (vm terminal-heading: ("=" repeat: text length)).
    Console write-line!: "".

  def self sub-heading!: text
    Console write-line!: (self bold: text).
    Console write-line!: (self bold: ("-" repeat: text length)).

  def self minor-heading!: text
    Console write-line!: (self bold: text, ":").

  def self markdown!: text
    Console write-line!: (vm render-markdown-to-terminal: text).

  def self indented: indent text!: text
    let pad = " " repeat: indent.
    Console write-line!: (text split-at: "\n"; map: pad, _; joined-by: "\n").

  def self line-break!
    Console write-line!: "".

  def self label: label text!: text
    Console write!: (self bold: label, ": ").
    Console write-line!: text.

  def self line!: text
    Console write-line!: text.

  def self bold: text
    vm terminal-bold: text.

  def self signature: method-mirror
    let format-signature = { name args |
      (name contains?: ":") then: {
        let names = name split-at: ":"; map: { n | (self bold: n), ":" }.
        Result ok: (args interleaved-with: names; filter: _ =/= ":").
      } else: {
        args length === 0 then: {
          Result ok: [self bold: name].
        } else: { args length === 1 then: {
          Result ok: [args first!. self bold: name].
        } else: { args length === 2 then: {
          Result ok: [args first!. self bold: name. args last!].
        } else: {
          Result failure: "(Can't format signature)".
        }}}
      }
    }.

    do {
      name <- method-mirror meta name.
      arguments <- method-mirror meta arguments.
      name-and-args <- format-signature call: name with: arguments.
      return name-and-args joined-by: " ".
    }.
}.