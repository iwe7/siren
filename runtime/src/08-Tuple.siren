(**********************************************************************
 *
 * This source file is part of the Siren project.
 *
 * Copyright (C) 2013-2015 Quildreen Motta.
 * Licensed under the MIT licence.
 *
 * See LICENCE for licence information.
 * See CONTRIBUTORS for the list of contributors to the project.
 *
 **********************************************************************)
module | vm | where

vm define-global: "Tuple" as: { vm native-array };

vm apply-trait-globally: extend Tuple with {
  def as-string
    "[" + (this join: ", ") + "]"

  (* Constructing *)
  def empty
    []

  (* Testing *)
  def empty?
    this length === 0
  
  (* Accessing *)
  def at: index
    ((index > 1) && (index <= this length))
      then: { Result failure: "Index " + index as-string
                            + " out of range [1, " + this length as-string + "]" }
      else: { Result ok: (vm array: this at: index) }

  def at!: index
    this at: index >> get!

  def first
    this at: 1

  def first!
    this first get!

  def last
    this at: this length

  def last!
    this last get!

  (* Collection operations *)
  def length
    vm array/length: this

  def + that
    vm array: this concat: that

  def index-of: value
    let index = vm array: this index-of: value;
    (index === 0) then: { Result failure: "Not found." }
                  else: { Result ok: index }

  def find: value
    this index-of: value >> map: (this at: _)
                
  def last-index-of: value
    let index = vm array: this last-index-of: value;
    (index === 0) then: { Result failure: "Not found." }
                  else: { Result ok: index }

  def join: separator
    vm array: (this map: _ as-string) join: separator

  (* Iteration *)
  def each: computation
    vm array: this each: { a | computation call: a };
    this

  def map: computation
    vm array: this map: { a | computation call: a }

  def filter: predicate
    vm array: this filter: { a | (predicate call: a) then: { vm true } else: { vm false } }

  def fold: f from: initial
    vm array: this reduce: { a b | f call: a with: b } from: initial

  def fold-right: f from: initial
    vm array: this reduce-right: { a b | f call: a with: b } from: initial
  
  (* Mutation *)
  def reverse
    vm array/reverse: (vm array/shallow-copy: this)

  def sort-by: comparator
    vm array: (vm array/shallow-copy: this) sort: { left right |
      comparator call: left with: right >> match: {
        def less-than    = -1
        def equal        =  0
        def greater-than =  1
      }
    }
  
};

vm foreign/convert: Tuple as: { a | a map: (FFI export: _) }