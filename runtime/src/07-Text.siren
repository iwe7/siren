#-----------------------------------------------------------------------
# 
# This source file is part of the Siren project.
#
# Copyright (C) 2013-2015 Quildreen Motta.
# Licensed under the MIT licence.
#
# See LICENCE for licence information.
# See CONTRIBUTORS for the list of contributors to the project.
#
#-----------------------------------------------------------------------
module | vm | where

vm define-global: "String" as: { vm native-string };

vm apply-trait-globally: extend String with {
  # Conversions  
  def this as-string
    this

  def this as-array
    this split: ""

  def this repeat: times
    vm string: this repeat: times

  # Character transformations / chopping 
  def this lower-case
    vm string/lower-case: this

  def this upper-case
    vm string/upper-case: this

  def this trim
    vm string/trim: this

  # Constructing 
  def this from-char-code: code
    vm string/from-char-code: code

  # Accessing 
  def this at: index
    vm string: this at: index

  def this code-at: index
    vm string: this code-at: index

  # Collection operations 
  def this length
    vm string/length: this

  def this + that
    vm string: this concat: that

  def this index-of: value
    let index = vm string: this index-of: value;
    (index === 0) then: { Result failure: "Not found." }
                  else: { Result ok: index }

  def this last-index-of: value
    let index = vm string: this index-of: value;
    (index === 0) then: { Result failure: "Not found." }
                  else: { Result ok: index }

  def this slice-from: index
    vm string: this slice-from: index

  def this slice-from: start to: end
    vm string: this slice-from: start to: end

  def this split: separator
    vm string: this split: separator

  # Logical comparisons 
  def this === that
    vm if: (vm string: this equals?: that)
       then: True
       else: False

  def this =/= that
    (this === that) not

  # Iteration 
  def this each: computation
    vm string: this each: { a | computation call: a }
};

vm foreign/convert: String as: { a | a }